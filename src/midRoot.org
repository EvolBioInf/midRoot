#+begin_src latex
  \section{Introduction}
  A phylogeny summarizes the evolutionary relationships between a sample
  of organisms. For example, the imaginary phylogeny in
  Figure~\ref{fig:phy}A the genealogy of six organisms, also called
  \emph{taxa}. The branches have lengths proportional to a measure of
  evolutionary change, often the number of mutations per site. The
  phylogeny is drawn in radial layout to emphasize that it has no
  root. In other words, the most recent common ancestor of the taxa is
  unknown. This is a standard result of many algorithms for
  reconstructing phylogenies, for example the neighbor joining
  algorithm~\cite{sai87:nei}. Still, in reality there was a common
  ancestor. A popular method for placing it on the tree is called
  midpoint rooting, where the root is located midpoint between the most
  distant taxa. In the example phylogeny Figure~\ref{fig:phy}A, the most distant pair of taxa
  is $t_1$/$t_4$. Rooting the phylogeny midpoint between them
  returns Figure~\ref{fig:phy}B, where the branch leading to $t_1$ was
  broken into a branch leading from the root to $t_1$ and a shorter branch
  leading from the root to the rest of the tree.

  \begin{figure}
    \begin{center}
      \begin{tabular}{ccc}
	\textbf{A} & \textcolor{white}{xxx}& \textbf{B}\\
	\input{smallU} & & \input{smallR}
      \end{tabular}
    \end{center}
    \caption{An example phylogeny unrooted (\textbf{A}) and rooted
      midpoint between $t_1$ and $t_4$ shown in bold (\textbf{B}).}\label{fig:phy}
  \end{figure}

  \section{Implementation}
  The program \texttt{midRoot} reads one or more trees and prints their
  midpoint rooted versions. Like many C programs, it starts with include
  statements, followed by function declarations, their implementations,
  and finally the main function.
#+end_src
#+begin_src C <<midRoot.c>>=
  // <<Include headers>>
  // <<Function declarations>>
  // <<Functions>>
  // <<Main function>>
#+end_src
#+begin_src latex
The \texttt{main} function is implemented first, as it
determines the rest.
#+end_src
#+begin_src C <<Main function>>=
  int main(int argc, char **argv) {
    Args *args = getArgs(argc, argv);
    setProgName(argv[0]);
    // <<Deal with user interface>>
    // <<Deal with input files>>
    freeArgs(args);
    free(getProgName());
    return 0;
  }
#+end_src
#+begin_src latex
The functions \texttt{getArgs} and \texttt{freeArgs} are declared in
\texttt{interface.h}, and the functions \texttt{setProgName} and
\texttt{getProgName} in \texttt{eprintf.h}. Both of these headers and
their implementations are part of this package. The function
\texttt{free} is part of the standard library.
#+end_src
#+begin_src C <<Include headers>>= 
  #include "interface.h"
  #include "eprintf.h"
  #include <stdlib.h>
#+end_src
#+begin_src latex
  The user might have requested the
  program version, in which case a---rather modest---splash screen is
  printed.
#+end_src
#+begin_src C <<Deal with user interface>>=
  if (args->v)
    printSplash(args);
#+end_src
#+begin_src latex
Alternatively, the user might request help, or an error has
occurred. In both cases a usage message is printed. Printing
usage or splash is declared in \texttt{interface.h}, which is already included.
#+end_src
#+begin_src C <<Deal with user interface>>=
  if (args->h || args->err)
    printUsage();
#+end_src
#+begin_src latex 
  Input is dealt with in the standard UNIX manner: If the user lists no
  files, \texttt{stdin} is the input stream; otherwise, each file in
  turn becomes the input stream.
#+end_src
#+begin_src C <<Deal with input files>>= 
  if (args->nf == 0) {
    FILE *fp = stdin;
    scanFile(fp, args);
  } else {
    for (int i = 0; i < args->nf; i++) {
      FILE *fp = efopen(args->fi[i], "r");
      scanFile(fp, args);
      fclose(fp);
    }
  }
#+end_src
#+begin_src latex
  The function \texttt{scanFile} is declared.
#+end_src
#+begin_src C <<Function declarations>>=
  void scanFile(FILE *fp, Args *args);
#+end_src
#+begin_src latex
  It retrieves each tree from a given file, roots it, and then prints it
  in the Newick format favored by biologists. Joe Felsenstein, who is
  one of its inventors, describes it on his web site:
  \small
  \begin{verbatim}
  http://evolution.genetics.washington.edu/phylip/newicktree.html
  \end{verbatim}
  \normalsize
#+end_src
#+begin_src C <<Functions>>=
  void scanFile(FILE *fp, Args *args) {
    setBisonFile(fp);
    Node *r, *m;
    while ((r = parseTree()) != NULL) {
      m = midRoot(r);
      printNewick(m);
      freeTree(m);
    }
  }
#+end_src
#+begin_src latex
  The functions \texttt{setBisonFile}, \texttt{parseTree},
  \texttt{printNewick}, and \texttt{freeTree} are part of the
  \texttt{tree} library distributed with this package.
#+end_src
#+begin_src C <<Include headers>>=
  #include "tree.h"
#+end_src
#+begin_src latex
  The function \texttt{midRoot} is declared.
#+end_src
#+begin_src C <<Function declarations>>=
  Node *midRoot(Node *r);
#+end_src
#+begin_src latex 
  It first searches for the pair of leaves with the largest
  distance. The new root is inserted midpoint between these leaves, and
  then the tree is rearranged accordingly. At the end of the program we
  free any memory allocated along the way is freed and the new root
  returned.
#+end_src
#+begin_src C <<Functions>>=
  Node *midRoot(Node *r) {
    // <<Find max. pair>>
    // <<Insert new root>>
    // <<Rearrange tree>>
    // <<Free memory>>
    return r;
  }
#+end_src
#+begin_src latex 
  To find the pair of leaves furthest apart, $(\ell_i,\ell_j)$, for each
  pair of leaves the distance to their lowes common ancestor,
  $\mathrm{lca}$, is computed. These values reveal the leaves furthest
  apart on the tree.
#+end_src
#+begin_src C <<Find max. pair>>=
  int n = 0;
  Node **leaves = NULL;
  leaves = getLeaves(r, leaves, &n);
  // <<Compute $d(\ell_i,\mathrm{lca})$>>
  // <<Look for maximum distance>>
#+end_src
#+begin_src latex
The leaves are freed at the end of the run.
#+end_src
#+begin_src C <<Free memory>>=
  free(leaves);
#+end_src
#+begin_src latex
  The function \texttt{getLeaves} is declared
#+end_src 
#+begin_src C <<Function declarations>>=
  Node **getLeaves(Node *r, Node **leaves, int *n);
#+end_src
#+begin_src latex
and implemented by direct recursion.
#+end_src
#+begin_src C <<Functions>>=
  Node **getLeaves(Node *r, Node **leaves, int *n) {
    if (r != NULL) {
      leaves = getLeaves(r->left, leaves, n);
      leaves = getLeaves(r->right, leaves, n);
      if (r->left == NULL) {
	*n = *n + 1;
	leaves = (Node **)erealloc(leaves, *n * sizeof(Node *));
	leaves[*n - 1] = r;
      }
    }
    return leaves;
  }
#+end_src
#+begin_src latex
  Having obtained the leaves, their distances to the lowes common
  ancestor (\emph{lca}) are computed for all pairs.
#+end_src
#+begin_src C <<Compute $d(\ell_i,\mathrm{lca})$>>=
  double **dlca = (double **)emalloc(n * sizeof(double *));
  for (int i = 0; i < n; i++)
    dlca[i] = (double *)emalloc(n * sizeof(double));
  for (int i = 0; i < n - 1; i++)
    for (int j = i; j < n; j++) {
      Node *la = lca(leaves[i], leaves[j]);
      dlca[i][j] = ancDist(leaves[i], la);
      dlca[j][i] = ancDist(leaves[j], la);
    }
#+end_src
#+begin_src latex
The memory for $d(\ell_i, \mathrm{lca})$ is freed at the end.
#+end_src
#+begin_src C <<Free memory>>=
  for (int i = 0; i < n; i++)
    free(dlca[i]);
  free(dlca);
#+end_src
#+begin_src latex
  Now everything is ready for finding the pair of leaves,
  $(\ell_i,\ell_j)$, with the maximum distance, $d_{\rm m}$.
#+end_src
#+begin_src C <<Look for maximum distance>>=
  double d, dm = 0;
  int im = 0, jm = 0;
  for (int i = 0; i < n - 1; i++) {
    for (int j = i + 1; j < n; j++) {
      d = dlca[i][j] + dlca[j][i];
      if (d > dm) {
	dm = d;
	im = i;
	jm = j;
      }
    }
  }
#+end_src

#+begin_src latex
  To insert the new root in the middle between $\ell_i$ and $\ell_j$,
  the relevant edge is located and split. Figure~\ref{fig:ur}A shows a
  version of Figure~\ref{fig:phy}A where the branch lengths have been
  abstracted and the internal nodes are labeled. Internally, such
  ``unrooted trees'' are in fact rooted, which is made explicit in
  Figure~\ref{fig:ur}B. To re-root along the edge $(t_1,n_2)$, it is
  located and a new node, $n_5$, added (Figure~\ref{fig:ur}C).
#+end_src
#+begin_src C <<Insert new root>>= 
  // <<Find edge to split>>
  // <<Add new node>>
#+end_src
#+begin_src latex 
  To find the edge to split, a climb towards the root is started from
  either $\ell_i$ or $\ell_j$, whichever has the greater distance to the
  lowest common ancestor. The climb continues until the sum of edge
  lengths exceeds $d_{\rm m} / 2$.
#+end_src
#+begin_src C <<Find edge to split>>= 
  Node *c, *p;  /* child, parent */
  double dh = dm / 2.;
  if (dlca[im][jm] > dh)
    c = leaves[im];
  else
    c = leaves[jm];
  double s = c->dist;
  while(c->parent && s < dh) {
    c = c->parent;
    s += c->dist;
  }
  p = c->parent;
#+end_src
#+begin_src latex
  Now the new root node, $n_5$, is created, the edge $(t_1, n_2)$ is
  split, and $n_5$ spliced in (Figure~\ref{fig:ur}C). The splicing is
  done in three steps: First, $n_5$ is added to the children of $n_2$,
  then $t_1$ is removed from the children of $n_2$, and $t_1$ added to
  the children of $n_5$. Finally, the distances to and from $n_5$ are
  adjusted.
#+end_src
#+begin_src C <<Add new node>>=
  Node *R = newNode(); /* new root */
  addChild(p, R);
  rmChild(p, c);
  addChild(R, c);
  // <<Adjust distances>>
#+end_src
#+begin_src latex
  The functions \texttt{addNode} and \texttt{rmChild} are already part
  of the \texttt{tree} library.  As to the distances, let $s$ be the
  length of the path $(t_1,n_2)$, and call the desired lengths
  $x_1=d(t_1,n_5)$ and $x_2=d(n_5,n_2)$. Then $x_2 = s - d_{\rm m} /2$
  and $x_1 = d(t_1,n_2) - x_2$.
#+end_src
#+begin_src C <<Adjust distances>>=
  float x2 = s - dm / 2.;
  float x1 = c->dist - x2;
  c->dist = x1;
  R->dist = x2;
#+end_src
#+begin_src latex 
  The last step is to rearrange the tree such that $n_5$ becomes the new
  root. Donald Knuth described the process for this as picking up the
  tree by $n_5$ in Figure~\ref{fig:ur}C, and shaking it to get
  Figure~\ref{fig:ur}D~\cite[p. 371]{knu97:ar1}. More formally, this is
  done by climbing from $n_5$ to the old root, $n_1$, and at every step
  converting the parent to a child node and adjusting the distance
  attribute accordingly. For this purpose, the new function
  \texttt{parentToChild} is applied to $n_5$, before making it the new
  root, which moves the algorithm from Figure~\ref{fig:ur}C to
  Figure~\ref{fig:ur}D.
  \begin{figure}
  \input{labels}
    \begin{center}
      \begin{tabular}{cc}
	  \textbf{A} & \textbf{B}\\
	  \scalebox{0.4}{\includegraphics{smallU}} & \scalebox{0.4}{\includegraphics{smallR}}\\
	  \textbf{C} & \textbf{D}\\
	  \scalebox{0.4}{\includegraphics{smallR2}} & \scalebox{0.4}{\includegraphics{smallR3}}
	\end{tabular}
    \end{center}
    \caption{Rooting a tree. (\textbf{A}) is drawn in the unrooted,
      radial layout often used in biology, even though internally it is
      rooted on $n_1$. This rooting is made explicit in (\textbf{B}),
      where we wish to reroot the tree on edge $(t_1,n_2)$ marked by
      $||$.  In (\textbf{C}) the future new root $n_5$ is added to the
      tree by splitting $(t_1,n_2)$. (\textbf{D}) is the newly rooted
      tree. It is obtained by picking up (\textbf{C}) at $n_5$ and
      shaking it~\cite[p. 373]{knu97:ar1}.}\label{fig:ur}
  \end{figure}
#+end_src
#+begin_src C <<Rearrange tree>>=
  parentToChild(R);
  r = R;
#+end_src
#+begin_src latex
The function \texttt{parentToChild} is declared
#+end_src
#+begin_src C <<Function declarations>>=
void parentToChild(Node *n);
#+end_src
#+begin_src latex
  and then implemented. 
#+end_src
#+begin_src C <<Functions>>=
    void parentToChild(Node *n) {
      if(n->parent->parent != NULL)
	parentToChild(n->parent);
      Node *p = n->parent;
      rmChild(p, n);
      addChild(n, p);
      p->dist = n->dist;
    }
#+end_src
#+begin_src latex
  For \texttt{assert} a new header of the standard library is included.
#+end_src
#+begin_src C <<Include headers>>=
#include <assert.h>
#+end_src
#+begin_src latex 
  This was the final piece in the puzzle, midpoint rooting can now be
  applied in pipelines like
  \begin{verbatim}
  andi foo.fasta | clustDist | midRoot | new2view
  \end{verbatim}
  where
  \texttt{andi}\footnote{\texttt{https://github.com/evolbioinf/andi}}
  computes the pairwise distances between the sequences in
  \texttt{foo.fasta}~\cite{hau15:and},
  \texttt{clustDist}\footnote{\texttt{https://github.com/evolbioinf/clustDist}}
  transforms them to a neighbor joining tree, \texttt{midRoot} midpoint
  roots it, and
  \texttt{new2view}\footnote{\texttt{https://github.com/evolbioinf/new2view}}
  finally draws the tree to the screen.
#+end_src
#+begin_src latex
\section{List of code chunks}
  \nowebchunks
\section{Index}
\nowebindex
#+end_latex
